openapi: 3.0.3
info:
  version: '1.0.0'
  title: Customer Hub APIs
  description: |
    This API contains endpoints that are used by Customer Hub application

servers:
  - url: http://localhost:8080
    description: Local server

paths:

  '/customers':
    post:
      summary: |
        Create a new customer in the system
      operationId: createNewCustomer
      tags:
        - 'CustomerCrud'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Returns Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    get:
      summary: return list of all customers
      operationId: listCustomers
      tags:
        - 'CustomerCrud'
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Returns Customer list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  '/customers/{customerId}':
    get:
      operationId: getCustomer
      tags:
        - 'CustomerCrud'
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        '200':
          description: Returns Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    put:
      summary: |
        update a customer
      operationId: updateCustomer
      tags:
        - 'CustomerCrud'
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: Returns Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      summary: delete a customer
      operationId: deleteCustomer
      tags:
        - 'CustomerCrud'
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  '/customers/find':
    get:
      summary: find a customer by firstName , lastName
      operationId: customerCrud
      tags:
        - 'findCustomer'
      parameters:
        - $ref: "#/components/parameters/FirstName"
        - $ref: "#/components/parameters/LastName"
      responses:
        '200':
          description: Returns Customer list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'


components:

  parameters:
    CustomerId:
      in: path
      name: customerId
      schema:
        type: integer
        format: int64
        minimum: 0
        example: 5
      required: true

    FirstName:
      in: query
      name: firstName
      schema:
        type: string

    LastName:
      in: query
      name: lastName
      schema:
        type: string

    Page:
      name: page
      in: query
      description: zero-based page index, must NOT be negative.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
        maximum: 50

    Size:
      in: query
      name: size
      description: number of items in a page to be returned, must be greater than 0.
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1

  schemas:

    NotFoundError:
      type: object
      title: Not Found Error
      description: The requested customer is not found
      properties:
        message:
          type: string
          description: Error message
      required:
        - code
        - message

    ErrorBodyIsMissed:
      type: object
      title: Error Body Is Missed
      properties:
        message:
          type: string
          description: Error message

    ErrorFieldIsRequired:
      type: object
      title: Error Field Is Required
      properties:
        message:
          type: string
          description: Error message

    ErrorFieldIsInvalid:
      type: object
      title: Error Field Is Invalid
      properties:
        message:
          type: string
          description: Error message

    CustomerRequest:
      type: object
      description: Object containing data to create a customer. firstName+lastName should be uniquie
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
        address:
          type: string
        email:
          type: string

    CustomerResponse:
      type: object
      required:
        - id
        - firstName
        - lastName
        - created
      allOf:
        - $ref: '#/components/schemas/CustomerRequest'
      properties:
        id:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
          description: the creation time of the customer in UTC
        updated:
          type: string
          format: date-time
          description: the creation time of the customer in UTC

    CustomerListResponse:
      type: object
      required:
        - page
        - size
        - content
      properties:
        page:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 1
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'

  responses:
    204:
      description: |-
        Operation completed successfully. No content to respond.
    400:
      description: |-
        Bad request in cases of:
        * `BODY_MISSING` - Json body needs to be provided
        * `FIELD_IS_REQUIRED` - Field X is mandatory
        * `FIELD_IS_INVALID` - Field X is invalid
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ErrorBodyIsMissed'
              - $ref: '#/components/schemas/ErrorFieldIsRequired'
              - $ref: '#/components/schemas/ErrorFieldIsInvalid'

    404:
      description: |-
        Item not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"
    500:
      description: |-
        * `TECHNICAL_ERROR` - technical error

    503:
      description: |-
        Service is unavailable
